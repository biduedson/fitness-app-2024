datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  gymAdmin      GymAdmin?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student? // Relacionamento opcional com a tabela Student
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model GymAdmin {
  id        String   @id @default(cuid())
  userId    String   @unique // Relaciona com o ID do usuário
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                String             @id @default(cuid()) // ID único do aluno
  userId            String             @unique // Referência ao ID do usuário
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentSince      DateTime           @default(now())
  paymentStatus     paymentStatus?
  paymentDueDate    DateTime? // Data de vencimento da mensalidade
  favoriteExercises FavoriteExercise[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model ExerciseCategory {
  id        String     @id @default(cuid()) // ID único da categoria
  name      String // Nome da categoria (ex.: "Abdominais", "Antebraço", etc.)
  exercises Exercise[] // Adicionando o relacionamento com Exercise

  beginnerExercises     BeginnerExercise[]
  intermediateExercises IntermediateExercise[]
  advancedExercises     AdvancedExercise[]
}

model BeginnerExercise {
  id         String           @id @default(cuid()) // ID único do exercício
  name       String // Nome do exercício
  imageUrl   String? // URL da imagem do exercício
  categoryId String
  category   ExerciseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IntermediateExercise {
  id         String           @id @default(cuid()) // ID único do exercício
  name       String // Nome do exercício
  imageUrl   String? // URL da imagem do exercício
  categoryId String
  category   ExerciseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdvancedExercise {
  id         String           @id @default(cuid()) // ID único do exercício
  name       String // Nome do exercício
  imageUrl   String? // URL da imagem do exercício
  categoryId String
  category   ExerciseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id          String           @id @default(cuid()) // ID único do exercício
  name        String // Nome do exercício
  imageUrl    String? // URL da imagem do exercício
  description String
  categoryId  String
  category    ExerciseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  favoriteByStudents FavoriteExercise[] // Relacionamento com alunos que favoritaram

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteExercise {
  id         String   @id @default(cuid())
  studentId  String
  exerciseId String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum paymentStatus {
  ACTIVE
  INACTIVE
}
